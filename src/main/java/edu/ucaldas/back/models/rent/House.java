package edu.ucaldas.back.models.rent;

import java.util.List;

import edu.ucaldas.back.models.review.HouseReview;
import edu.ucaldas.back.models.user.User;
import jakarta.persistence.Embedded;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Represents a house entity in the system.
 * This class is annotated as a JPA entity and maps to the "house" table in the database.
 * It contains information about a house, including its description, address, owner, reviews, images, and availability status.
 * 
 * <p>Annotations:
 * <ul>
 *   <li>@Entity - Marks this class as a JPA entity.</li>
 *   <li>@Table(name = "house") - Specifies the table name in the database.</li>
 *   <li>@Getter, @Setter - Lombok annotations to generate getter and setter methods.</li>
 *   <li>@NoArgsConstructor, @AllArgsConstructor - Lombok annotations to generate constructors.</li>
 *   <li>@EqualsAndHashCode(of = "id") - Lombok annotation to generate equals and hashCode methods based on the "id" field.</li>
 * </ul>
 * </p>
 * 
 * <p>Fields:
 * <ul>
 *   <li>id - The unique identifier for the house. It is auto-generated.</li>
 *   <li>description - A textual description of the house.</li>
 *   <li>address - The address of the house, represented as an embedded object.</li>
 *   <li>owner - The user who owns the house. It is a many-to-one relationship.</li>
 *   <li>reviews - A list of reviews associated with the house. It is a one-to-many relationship.</li>
 *   <li>stars - The average star rating of the house.</li>
 *   <li>isAvailable - Indicates whether the house is available for rent.</li>
 *   <li>images - A list of images associated with the house. It is a one-to-many relationship.</li>
 *   <li>isActive - Indicates whether the house is active in the system.</li>
 * </ul>
 * </p>
 * 
 * <p>Constructors:
 * <ul>
 *   <li>House() - No-argument constructor generated by Lombok.</li>
 *   <li>House(long id, String description, address address, User owner, List<HouseReview> reviews, float stars, boolean isAvailable, List<HouseImages> images, boolean isActive) - All-argument constructor generated by Lombok.</li>
 *   <li>House(HouseData houseData, User owner) - Custom constructor to initialize a house with data from a HouseData object and an owner.</li>
 * </ul>
 * </p>
 */
@Entity
@Table(name = "houses")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class House {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    private String description;
    @Embedded
    private Address address;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "user_id")
    private User owner;
    @OneToMany(mappedBy = "houseReviewed", fetch = FetchType.LAZY)
    private List<HouseReview> reviews;
    private float stars;
    private boolean isAvailable;
    @OneToMany(mappedBy = "house", fetch = FetchType.LAZY)
    private List<HouseImage> images;
    private boolean isActive;

    public House(HouseData houseData, User owner) {
        this.description = houseData.description();
        this.address = new Address(houseData.addressData());
        this.owner = owner;
        this.stars = 0;
        this.isAvailable = true;
        this.isActive = true;
    }

}

package edu.ucaldas.back.models.chat;

import java.time.LocalDateTime;
import java.util.List;

import edu.ucaldas.back.models.rent.House;
import edu.ucaldas.back.models.user.User;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Represents a chat entity in the system.
 * A chat is associated with a house and involves two users: the owner and the interested party.
 * It also contains a list of messages exchanged in the chat.
 * 
 * <p>Annotations:</p>
 * <ul>
 *   <li>@Entity: Marks this class as a JPA entity.</li>
 *   <li>@Table(name = "chat"): Maps this entity to the "chat" table in the database.</li>
 *   <li>@Getter, @Setter: Automatically generates getter and setter methods for all fields.</li>
 *   <li>@NoArgsConstructor, @AllArgsConstructor: Generates constructors with no arguments and all arguments, respectively.</li>
 *   <li>@EqualsAndHashCode(of = "id"): Generates equals and hashCode methods based on the "id" field.</li>
 * </ul>
 * 
 * <p>Fields:</p>
 * <ul>
 *   <li>id: The unique identifier for the chat, auto-generated by the database.</li>
 *   <li>owner: The user who owns the house associated with the chat.</li>
 *   <li>interested: The user interested in the house associated with the chat.</li>
 *   <li>house: The house associated with the chat.</li>
 *   <li>messages: The list of messages exchanged in the chat.</li>
 *   <li>dateTime: The date and time when the chat was created.</li>
 *   <li>isActive: Indicates whether the chat is currently active.</li>
 * </ul>
 * 
 * <p>Constructors:</p>
 * <ul>
 *   <li>Chat(): Default constructor.</li>
 *   <li>Chat(User owner, User interested, House house): Initializes a new chat with the specified owner, interested user, and house. 
 *       Sets the creation date and time to the current time and marks the chat as active.</li>
 * </ul>
 */
@Entity
@Table(name = "chats")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(of = "id")
public class Chat {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "owner_id")
    private User owner;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "interested_id")
    private User interested;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "house_id")
    private House house;
    @OneToMany(mappedBy = "chat", fetch = FetchType.LAZY)
    private List<Message> messages;
    private LocalDateTime dateTime;
    private boolean isActive;

    public Chat(User owner, User interested, House house) {
        this.owner = owner;
        this.interested = interested;
        this.house = house;
        this.dateTime = LocalDateTime.now();
        this.isActive = true;
    }

}
